import gym
import numpy as np
import tensorflow as tf
from tensorflow import keras
from collections import deque
import random
import matplotlib.pyplot as plt

# === Environment ===
env = gym.make("CartPole-v1", render_mode="human")  # tampilkan animasi
state_size = env.observation_space.shape[0]
action_size = env.action_space.n

# === Hyperparameters ===
learning_rate = 0.001
gamma = 0.95
epsilon = 1.0
epsilon_min = 0.01
epsilon_decay = 0.995
batch_size = 32
memory = deque(maxlen=2000)

# === DQN Model ===
model = keras.Sequential([
    keras.layers.Dense(24, input_shape=(state_size,), activation="relu"),
    keras.layers.Dense(24, activation="relu"),
    keras.layers.Dense(action_size, activation="linear")
])
model.compile(loss="mse", optimizer=keras.optimizers.Adam(learning_rate=learning_rate))

# === Fungsi aksi ===
def select_action(state):
    if np.random.rand() <= epsilon:
        return np.random.choice(action_size)
    q_values = model.predict(state, verbose=0)
    return np.argmax(q_values[0])

# === Training + Visualisasi ===
episodes = 50    # coba dulu 50 episode
scores = []      # simpan reward total tiap episode

for episode in range(episodes):
    state, _ = env.reset()
    state = np.reshape(state, [1, state_size])
    total_reward = 0

    for time in range(500):
        action = select_action(state)
        next_state, reward, terminated, truncated, _ = env.step(action)
        done = terminated or truncated
        next_state = np.reshape(next_state, [1, state_size])

        memory.append((state, action, reward, next_state, done))
        state = next_state
        total_reward += reward

        if done:
            break

    # Simpan skor episode
    scores.append(total_reward)

    # Replay training
    if len(memory) > batch_size:
        minibatch = random.sample(memory, batch_size)
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target += gamma * np.amax(model.predict(next_state, verbose=0)[0])
            target_f = model.predict(state, verbose=0)
            target_f[0][action] = target
            model.fit(state, target_f, epochs=1, verbose=0)

    # Kurangi epsilon
    if epsilon > epsilon_min:
        epsilon *= epsilon_decay

    print(f"Episode {episode+1}/{episodes}, Score: {total_reward}, Epsilon: {epsilon:.4f}")

env.close()

# === Plot grafik hasil training ===
plt.plot(scores)
plt.xlabel("Episode")
plt.ylabel("Score (Stabilitas Sendi)")
plt.title("Pendeteksi Sendi - Stabilitas CartPole")
plt.show()
